{
	"info": {
		"_postman_id": "1ff90c30-3156-4d22-be70-0e86463909a3",
		"name": "Juvo-Iq-cwc (dev)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get the Access Token from Authentication call",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2963635f-dfee-4c7a-a59d-b269690ab887",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "07b65f33-edca-4a21-a4d2-41dcface1d9c",
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "UuXtEsRRXVH8VZEvzVHXbtnn",
						"password": "XTRXVeuWW4cQUFnrfYEbwvnA",
						"saveHelperData": true,
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "ApplicationId",
						"value": "juvo.cwc.policy.us",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{hostname}}/v1/iq/auth/tokens"
			},
			"response": []
		},
		{
			"name": "All Policies (index)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"",
							"//  var jsonData = pm.response.json();",
							"// pm.test(\"Name of Policy is displaying as expected\", function () {",
							"//   pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"// });",
							"// pm.test(\"Policy Version is Displaying as Expected \", function () {",
							"//     pm.expect(jsonData.rules_version).to.eql(pm.environment.get(\"Policy_Version\"));",
							"// });",
							"// pm.test(\"Policy Creation Date is Displaying as Expected \", function () {",
							"//     pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{access_token}}"
					}
				],
				"url": "{{hostname}}/v1/iq/policies"
			},
			"response": []
		},
		{
			"name": "Create a Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d852571-2a90-449b-8d8d-eded1ed23301",
						"exec": [
							"",
							"if(pm.response.code==422)",
							"{",
							" pm.test(\"Same policy having same set of rules defined alreday exists\");   ",
							"}",
							"else if(pm.response.code==201){",
							"pm.test(\"Successful POST request,Policy has been successfully created\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
							"});",
							" pm.test(\"Status code name has OK String \", function () {",
							"    pm.response.to.have.status(\"Created\");",
							" });",
							" pm.test(\"Poilicy Name is Present is the Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"policy_name\");",
							" });",
							"//      pm.test(\"Poilicy Rule Version is Present is the Response\", function () {",
							"//     pm.expect(pm.response.text()).to.include(\"rules_version\");",
							"//  });",
							"//   pm.test(\"Poilicy Creation Date is the Response in the Response\", function () {",
							"//     pm.expect(pm.response.text()).to.include(\"rules_version\");",
							"//  });",
							"}",
							"var jsonData = JSON.parse(responseBody);",
							"var reqBody = JSON.parse(request.data);",
							"reqBody.name;",
							"console.log(reqBody.name);",
							"pm.environment.set(\"Policy_Name\", reqBody.name);",
							"pm.environment.set(\"Policy_Version\", jsonData.rules_version);",
							"pm.environment.set(\"Policy_Creation_Date\", jsonData.policy_created_at);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "ApplicationId",
						"value": "juvo.cwc.policy.us",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\n    \"name\": \"policy_1\",\n    \"type\": \"audience\",\n    \"properties\": {\n        \"score_min\": 0,\n        \"score_max\": 100,\n        \"decision_tiers\": {\n            \"accept\": [\n                40,\n                100\n            ],\n            \"reject\": [\n                0,\n                20\n            ],\n            \"review\": [\n                20,\n                40\n            ]\n        }\n    },\n    \"rules\": [\n        {\n            \"dependency_scope\": null,\n            \"generate_reason_code\": true,\n            \"invert_evaluation\": false,\n            \"properties\": {\n                \"attribute_namespaces\": [\n                    \"recharges\",\n                    \"recharges\",\n                    \"metadata\"\n                ],\n                \"attributes\": [\n                    \"recharge_amount_past_90_days\",\n                    \"recharge_amount_past_30_days\",\n                    \"age_days\"\n                ],\n                \"conditions\": [\n                    \">=\",\n                    \">=\",\n                    \">=\"\n                ],\n                \"rule_condition\": \"AND\",\n                \"values\": [\n                    4000,\n                    1500,\n                    180\n                ]\n            },\n            \"rule_id\": 1,\n            \"rule_name\": \"max_monthly_payment_1500\",\n            \"rule_type\": \"Multiple_numeric_attribute\",\n            \"weight\": 1500\n        },\n        {\n            \"generate_reason_code\": false,\n            \"invert_evaluation\": true,\n            \"properties\": {\n                \"dependencies\": [\n                    \"max_monthly_payment_1500\"\n                ],\n                \"dependency_conditions\": [\n                    true\n                ],\n                \"rule_condition\": \"AND\"\n            },\n            \"rule_id\": 3,\n            \"rule_name\": \"IF_NOT_max_monthly_payment_1500\",\n            \"rule_type\": \"IF\"\n        },\n        {\n            \"dependency_scope\": \"IF_NOT_max_monthly_payment_1500\",\n            \"generate_reason_code\": true,\n            \"invert_evaluation\": false,\n            \"properties\": {\n                \"attribute_namespaces\": [\n                    \"recharges\",\n                    \"recharges\",\n                    \"metadata\"\n                ],\n                \"attributes\": [\n                    \"recharge_amount_past_90_days\",\n                    \"recharge_amount_past_30_days\",\n                    \"age_days\"\n                ],\n                \"conditions\": [\n                    \">=\",\n                    \">=\",\n                    \">=\"\n                ],\n                \"rule_condition\": \"AND\",\n                \"values\": [\n                    2000,\n                    500,\n                    180\n                ]\n            },\n            \"rule_id\": 2,\n            \"rule_name\": \"max_monthly_payment_750\",\n            \"rule_type\": \"Multiple_numeric_attribute\",\n            \"weight\": 750\n        }\n    ]\n}"
				},
				"url": "{{hostname}}/v1/iq/policies"
			},
			"response": []
		},
		{
			"name": "Get the Policy by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"var jsonData = pm.response.json();",
							"// Setting up Policy Name variable in Environments      ",
							"postman.setEnvironmentVariable(\"Policy_Name\", jsonData.policy_name);",
							" // Validating Policy Name in the JSON   ",
							"pm.test(\"Name of Policy is displaying as expected\", function() {",
							"    pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"});",
							"",
							"",
							"",
							"postman.setEnvironmentVariable(\"Policy_id\", jsonData.policy_id);",
							"console.log(pm.environment.get(\"Policy_id\"));",
							"",
							"// pm.test(\"Policy ID is Displaying as Expected\", function() {",
							"//     pm.expect(jsonData.policy_id).to.equal(pm.environment.get(\"70\"));",
							"",
							"// });",
							"",
							"// pm.test(\"Policy Creation Date is Displaying as Expected \", function() {",
							"//     pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{access_token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": "{{hostname}}/v1/iq/policies/{{Policy_id}}"
			},
			"response": []
		},
		{
			"name": "Update the Policy by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"",
							" var jsonData = pm.response.json();",
							"pm.test(\"Name of Policy is displaying as expected\", function () {",
							"   pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"});",
							"// pm.test(\"Policy Version is Displaying as Expected \", function () {",
							"//     pm.expect(jsonData.rules_version).to.eql(pm.environment.get(\"Policy_Version\"));",
							"// });",
							"// pm.test(\"Policy Creation Date is Displaying as Expected \", function () {",
							"//     pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{access_token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\n    \"name\": \"policy_1\",\n    \"type\": \"audience\",\n    \"properties\":{\n        \"score_min\": 0,\n        \"score_max\": 100,\n        \"decision_tiers\": {\n            \"accept\": [\n                40,\n                100\n            ],\n            \"reject\": [\n                0,\n                20\n            ],\n            \"review\": [\n                20,\n                40\n            ]\n        }\n    },\n    \"rules\": [\n        {\n            \"dependency_scope\": null,\n            \"generate_reason_code\": true,\n            \"invert_evaluation\": false,\n            \"properties\": {\n                \"attribute_namespaces\": [\n                    \"recharges\",\n                    \"recharges\",\n                    \"metadata\"\n                ],\n                \"attributes\": [\n                    \"recharge_amount_past_90_days\",\n                    \"recharge_amount_past_30_days\",\n                    \"age_days\"\n                ],\n                \"conditions\": [\n                    \">=\",\n                    \">=\",\n                    \">=\"\n                ],\n                \"rule_condition\": \"AND\",\n                \"values\": [\n                    4000,\n                    1500,\n                    180\n                ]\n            },\n            \"rule_id\": 1,\n            \"rule_name\": \"max_monthly_payment_1500\",\n            \"rule_type\": \"Multiple_numeric_attribute\",\n            \"weight\": 1500\n        },\n        {\n            \"generate_reason_code\": false,\n            \"invert_evaluation\": true,\n            \"properties\": {\n                \"dependencies\": [\n                    \"max_monthly_payment_1500\"\n                ],\n                \"dependency_conditions\": [\n                    true\n                ],\n                \"rule_condition\": \"AND\"\n            },\n            \"rule_id\": 3,\n            \"rule_name\": \"IF_NOT_max_monthly_payment_1500\",\n            \"rule_type\": \"IF\"\n        },\n        {\n            \"dependency_scope\": \"IF_NOT_max_monthly_payment_1500\",\n            \"generate_reason_code\": true,\n            \"invert_evaluation\": false,\n            \"properties\": {\n                \"attribute_namespaces\": [\n                    \"recharges\",\n                    \"recharges\",\n                    \"metadata\"\n                ],\n                \"attributes\": [\n                    \"recharge_amount_past_90_days\",\n                    \"recharge_amount_past_30_days\",\n                    \"age_days\"\n                ],\n                \"conditions\": [\n                    \">=\",\n                    \">=\",\n                    \">=\"\n                ],\n                \"rule_condition\": \"AND\",\n                \"values\": [\n                    2000,\n                    500,\n                    180\n                ]\n            },\n            \"rule_id\": 2,\n            \"rule_name\": \"max_monthly_payment_750\",\n            \"rule_type\": \"Multiple_numeric_attribute\",\n            \"weight\": 750\n        }\n    ]\n}"
				},
				"url": "{{hostname}}/v1/iq/policies/{{Policy_id}}"
			},
			"response": []
		},
		{
			"name": "Get a Policy Decision for a MSISDN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d845401-d018-4102-9141-9bdd86e4a4e3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the Properties in Meta data in Policy Decision API Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"decision\");",
							"        pm.expect(pm.response.text()).to.include(\"number_of_rules_evaluated\");",
							"          pm.expect(pm.response.text()).to.include(\"policy_name\");",
							"            pm.expect(pm.response.text()).to.include(\"policy_execution_terminated\");",
							"              pm.expect(pm.response.text()).to.include(\"request_timestamp\");",
							"                pm.expect(pm.response.text()).to.include(\"score\");",
							"});",
							"",
							"    var jsonData = pm.response.json();",
							"// pm.test(\"Verify the User is evaluated for Correct Policy\", function () {",
							"// pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "ApplicationId",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"msisdn\" : \"93228914195\"\n}"
				},
				"url": "{{hostname}}/v1/iq/policies/{{Policy_id}}/decisions"
			},
			"response": []
		},
		{
			"name": "Get User Profile by MSISDN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0aaad87b-100c-483d-b9ce-f8754c10f9a3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the Properties in Meta-data Object in Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"age_days\");",
							"      pm.expect(pm.response.text()).to.include(\"areacode\");",
							"        pm.expect(pm.response.text()).to.include(\"country_code\");",
							"          pm.expect(pm.response.text()).to.include(\"creation_date\");",
							"          ",
							"  pm.expect(pm.response.text()).to.include(\"current_state\");",
							"    pm.expect(pm.response.text()).to.include(\"juvo_activity_status\");",
							"      pm.expect(pm.response.text()).to.include(\"juvo_creation_date\");",
							"        pm.expect(pm.response.text()).to.include(\"max_level_index\");",
							"          pm.expect(pm.response.text()).to.include(\"subscr_no\");",
							"});",
							"pm.test(\"Rechrages Section is Displaying in Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"recharge\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"msisdn\": \"93228914195\"\n}"
				},
				"url": "{{hostname}}/v1/iq/profiles"
			},
			"response": []
		},
		{
			"name": "All Audiences (index)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"",
							"//  var jsonData = pm.response.json();",
							"// pm.test(\"Name of Policy is displaying as expected\", function () {",
							"//   pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"// });",
							"// pm.test(\"Policy Version is Displaying as Expected \", function () {",
							"//     pm.expect(jsonData.rules_version).to.eql(pm.environment.get(\"Policy_Version\"));",
							"// });",
							"// pm.test(\"Policy Creation Date is Displaying as Expected \", function () {",
							"//     pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{access_token}}"
					}
				],
				"url": "{{hostname}}/v1/iq/audiences"
			},
			"response": []
		},
		{
			"name": "Create Audience",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0aaad87b-100c-483d-b9ce-f8754c10f9a3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the Properties in Meta-data Object in Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"age_days\");",
							"      pm.expect(pm.response.text()).to.include(\"areacode\");",
							"        pm.expect(pm.response.text()).to.include(\"country_code\");",
							"          pm.expect(pm.response.text()).to.include(\"creation_date\");",
							"          ",
							"  pm.expect(pm.response.text()).to.include(\"current_state\");",
							"    pm.expect(pm.response.text()).to.include(\"juvo_activity_status\");",
							"      pm.expect(pm.response.text()).to.include(\"juvo_creation_date\");",
							"        pm.expect(pm.response.text()).to.include(\"max_level_index\");",
							"          pm.expect(pm.response.text()).to.include(\"subscr_no\");",
							"});",
							"pm.test(\"Rechrages Section is Displaying in Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"recharge\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "ApplicationId",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\" : \"audience_1\",\n  \"policy_id\" : 76\n}"
				},
				"url": "{{hostname}}/v1/iq/audiences"
			},
			"response": []
		},
		{
			"name": "Get the Audience by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"",
							" var jsonData = pm.response.json();",
							"pm.test(\"Name of Policy is displaying as expected\", function () {",
							"   pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"});",
							"pm.test(\"Policy Version is Displaying as Expected \", function () {",
							"    pm.expect(jsonData.rules_version).to.eql(pm.environment.get(\"Policy_Version\"));",
							"});",
							"pm.test(\"Policy Creation Date is Displaying as Expected \", function () {",
							"    pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{access_token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": "{{hostname2}}/v1/iq/audiences/{{Audience_id}}"
			},
			"response": []
		},
		{
			"name": "Update the Audience by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"",
							" var jsonData = pm.response.json();",
							"pm.test(\"Name of Policy is displaying as expected\", function () {",
							"   pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"});",
							"pm.test(\"Policy Version is Displaying as Expected \", function () {",
							"    pm.expect(jsonData.rules_version).to.eql(pm.environment.get(\"Policy_Version\"));",
							"});",
							"pm.test(\"Policy Creation Date is Displaying as Expected \", function () {",
							"    pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "juvo.cwc.policy.us"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{access_token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\" : \"audience_1\"\n}"
				},
				"url": "{{hostname}}/v1/iq/audiences/{{Audience_id}}"
			},
			"response": []
		},
		{
			"name": "token (payjoy)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2963635f-dfee-4c7a-a59d-b269690ab887",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"postman.setEnvironmentVariable(\"payjoy_access_token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "07b65f33-edca-4a21-a4d2-41dcface1d9c",
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "8fCMrZmhcVnwNMszYJdhBbkpfoyfrYWL",
						"username": "AWnuoieGfBBbuHDHQE9UXwQmxmJZDruc",
						"saveHelperData": true,
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "payjoy.mtn.policy.ci"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{hostname2}}/v1/iq/auth/tokens"
			},
			"response": []
		},
		{
			"name": "policy (payjoy)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bd7d767-15c6-4d3a-a19f-cce27da5ea35",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.environment.get(\"Policy_Name\"));",
							"",
							" var jsonData = pm.response.json();",
							"pm.test(\"Name of Policy is displaying as expected\", function () {",
							"   pm.expect(jsonData.policy_name).to.eql(pm.environment.get(\"Policy_Name\"));",
							"});",
							"pm.test(\"Policy Version is Displaying as Expected \", function () {",
							"    pm.expect(jsonData.rules_version).to.eql(pm.environment.get(\"Policy_Version\"));",
							"});",
							"pm.test(\"Policy Creation Date is Displaying as Expected \", function () {",
							"    pm.expect(jsonData.policy_updated_at).to.eql(pm.environment.get(\"Policy_Creation_Date\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"type": "text",
						"value": "payjoy.mtn.policy.ci"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"type": "text",
						"value": "{{payjoy_access_token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": "{{hostname2}}/v1/iq/policies/{{Policy_Name}}"
			},
			"response": []
		},
		{
			"name": "profile (payjoy)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0aaad87b-100c-483d-b9ce-f8754c10f9a3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the Properties in Meta-data Object in Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"age_days\");",
							"      pm.expect(pm.response.text()).to.include(\"areacode\");",
							"        pm.expect(pm.response.text()).to.include(\"country_code\");",
							"          pm.expect(pm.response.text()).to.include(\"creation_date\");",
							"          ",
							"  pm.expect(pm.response.text()).to.include(\"current_state\");",
							"    pm.expect(pm.response.text()).to.include(\"juvo_activity_status\");",
							"      pm.expect(pm.response.text()).to.include(\"juvo_creation_date\");",
							"        pm.expect(pm.response.text()).to.include(\"max_level_index\");",
							"          pm.expect(pm.response.text()).to.include(\"subscr_no\");",
							"});",
							"pm.test(\"Rechrages Section is Displaying in Response Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"recharge\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ApplicationId",
						"value": "payjoy.mtn.policy.ci"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{payjoy_access_token}}"
					}
				],
				"url": "{{hostname2}}/v1/iq/profiles/93228914195"
			},
			"response": []
		}
	]
}